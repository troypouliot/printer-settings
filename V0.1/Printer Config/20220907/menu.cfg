# This file serves as default menu structure.
# See the "example-menu.cfg" file for description of common config parameters.

### DEFAULT MENU ###
# Main
#   + Tune
#       + Speed: 000%
#       + Flow: 000%
#       + Offset Z:00.00
#   + OctoPrint
#       + Pause printing
#       + Resume printing
#       + Abort printing
#   + SD Card
#       + Start printing
#       + Resume printing
#       + Pause printing
#       + ... (files)
#   + Control
#       + Home All
#       + Home Z
#       + Home X/Y
#       + Steppers off
#       + Fan: OFF
#       + Fan speed: 000%
#       + Lights: OFF
#       + Lights: 000%
#       + Move 10mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 0.1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#   + Temperature
#       + Ex0:000 (0000)
#       + Ex1:000 (0000)
#       + Bed:000 (0000)
#       + Preheat PLA
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Preheat ABS
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Cooldown
#           + Cooldown all
#           + Cooldown hotend
#           + Cooldown hotbed
#   + Filament
#       + Ex0:000 (0000)
#       + Load Fil. fast
#       + Load Fil. slow
#       + Unload Fil.fast
#       + Unload Fil.slow
#       + Feed: 000.0
#   + Setup
#       + Save config
#       + Restart
#           + Restart host
#           + Restart FW
#       + PID tuning
#           + Tune Hotend PID
#           + Tune Hotbed PID
#       + Calibration
#           + Delta cal. auto
#           + Delta cal. man
#               + Start probing
#               + Move Z: 000.00
#               + Test Z: ++
#               + Accept
#               + Abort
#           + Bed probe
#       + Dump parameters

### menu main ###
[menu __mymain]
type: list
name: Main

### menu tune ###
[menu __mymain __tune]
type: list
name: Tune

[menu __mymain __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __mymain __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __mymain __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### menu octoprint ###
[menu __mymain __mainsail]
type: list
name: Mainsail

[menu __mymain __mainsail __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    PAUSE

[menu __mymain __mainsail __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    RESUME

[menu __mymain __mainsail __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
gcode:
    PRINT_END

### menu virtual sdcard ###
# [menu __mymain __sdcard]
# type: vsdlist
# enable: {('virtual_sdcard' in printer)}
# name: SD Card

# [menu __mymain __sdcard __start]
# type: command
# enable: {('virtual_sdcard' in printer) and not printer.idle_timeout.state == "Printing"}
# name: Start printing
# gcode: M24

# [menu __mymain __sdcard __resume]
# type: command
# enable: {('virtual_sdcard' in printer) and printer.idle_timeout.state == "Printing"}
# name: Resume printing
# gcode: M24

# [menu __mymain __sdcard __pause]
# type: command
# enable: {('virtual_sdcard' in printer) and printer.idle_timeout.state == "Printing"}
# name: Pause printing
# gcode: M25

### menu control ###
[menu __mymain __control]
type: list
name: Control

[menu __mymain __control __caselighton]
type: command
enable: {'output_pin leds' in printer}
name: Light On
gcode:
    SET_PIN PIN=leds VALUE=1.00
	
[menu __mymain __control __caselightoff]
type: command
enable: {'output_pin leds' in printer}
name: Light Off
gcode:
    SET_PIN PIN=leds VALUE=0

[menu __mymain __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
gcode: G28

[menu __mymain __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __mymain __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __mymain __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu __mymain __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __mymain __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

# [menu __mymain __control __caselightonoff]
# type: input
# enable: {'output_pin caselight' in printer}
# name: Lights: {'ON ' if menu.input else 'OFF'}
# input: {printer['output_pin caselight'].value}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
    # SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

# [menu __mymain __control __caselightpwm]
# type: input
# enable: {'output_pin caselight' in printer}
# name: Lights: {'%3d' % (menu.input*100)}%
# input: {printer['output_pin caselight'].value}
# input_min: 0.0
# input_max: 1.0
# input_step: 0.01
# gcode:
    # SET_PIN PIN=caselight VALUE={menu.input}
	
# [menu __mymain __control __caselightonoff]
# type: input
# enable: {'output_pin caselight' in printer}
# name: Lights: {'ON ' if menu.input else 'OFF'}
# input: {printer['output_pin caselight'].value}
# transform:
    # choose('OFF','ON')
    # choose(0,100)
# input_min: 0
# input_max: 100
# input_step: 1
# gcode: SET_PIN PIN=caselight VALUE={2}



### menu move 10mm ###
[menu __mymain __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 10mm

[menu __mymain __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 120
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 117
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 160
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __mymain __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm

[menu __mymain __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 120
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 117
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 160
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __mymain __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm

[menu __mymain __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: 0
input_max: 120
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: 0
input_max: 117
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 160
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __mymain __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -50
input_max: 50
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __mymain __temp]
type: list
name: Temperature

[menu __mymain __temp __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __mymain __temp __hotend1_target]
type: input
enable: {'extruder1' in printer}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __mymain __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __mymain __temp __preheat_pla]
type: list
name: Preheat PLA

[menu __mymain __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S65
    M104 S220

[menu __mymain __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S220

[menu __mymain __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S65

[menu __mymain __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __mymain __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

# [menu __mymain __temp __preheat_abs __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S245

# [menu __mymain __temp __preheat_abs __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S110

[menu __mymain __temp __cooldown]
type: list
name: Cooldown

[menu __mymain __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

# [menu __mymain __temp __cooldown __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Cooldown hotend
# gcode: M104 S0

# [menu __mymain __temp __cooldown __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Cooldown hotbed
# gcode: M140 S0

### menu filament ###

[menu __mymain __filament]
type: list
name: Filament

[menu __mymain __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __mymain __filament __loadf]
type: command
name: Load Fil
gcode:
    load_filament

# [menu __mymain __filament __loads]
# type: command
# name: Load Fil MAN
# gcode:
    # PAUSED_LOAD_FILAMENT

[menu __mymain __filament __unloadf]
type: command
name: Unload Fil
gcode:
   unload_filament
 
[menu __mymain __filament __reset]
type: list
name: Filament Reset
 
[menu __mymain __filament __reset __reset]
type: command
#enable: {printer.save_variables.variables.readytoload == False}
name: Reset Fil
gcode:
   RESET_FILAMENT


# [menu __mymain __filament __unloads]
# type: command
# name: Unload Fil.slow
# gcode:
    # SAVE_GCODE_STATE NAME=__filament__load
    # M83
    # G1 E-50 F240
    # RESTORE_GCODE_STATE NAME=__filament__load

# [menu __mymain __filament __feed]
# type: input
# name: Feed: {'%.1f' % menu.input}
# input: 5
# input_step: 0.1
# gcode:
    # SAVE_GCODE_STATE NAME=__filament__load
    # M83
    # G1 E{'%.1f' % menu.input} F60
    # RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __mymain __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __mymain __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __mymain __setup __restart]
type: list
name: Restart

[menu __mymain __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __mymain __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __mymain __setup __tuning]
type: list
name: PID tuning


[menu __mymain __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=255 WRITE_FILE=1

[menu __mymain __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=110 WRITE_FILE=1

[menu __mymain __setup __calib]
type: list
name: Calibration

[menu __mymain __setup __calib __bed_adjust]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed Screws Adj.

[menu __mymain __setup __calib __bed_adjust __start]
type: command
name: Start Routine
gcode: BED_SCREWS_ADJUST

[menu __mymain __setup __calib __bed_adjust __accept]
type: command
name: Accept Point
gcode: ACCEPT

[menu __mymain __setup __calib __bed_adjust __adjust]
type: command
name: Adjusted Point
gcode: ADJUSTED

[menu __mymain __setup __calib __bed_adjust __abort]
type: command
name: ABORT
gcode: ABORT

# [menu __mymain __setup __calib __delta_calib_auto]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Delta cal. auto
# gcode:
#     G28
#     DELTA_CALIBRATE

# [menu __mymain __setup __calib __delta_calib_man]
# type: list
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Delta cal. man

# [menu __mymain __setup __calib __bedprobe]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Bed probe
# gcode: PROBE

# [menu __mymain __setup __calib __delta_calib_man __start]
# type: command
# name: Start probing
# gcode:
#     G28
#     DELTA_CALIBRATE METHOD=manual

# [menu __mymain __setup __calib __delta_calib_man __move_z]
# type: input
# name: Move Z: {'%03.2f' % menu.input}
# input: {printer.gcode_move.gcode_position.z}
# input_step: 1
# realtime: True
# gcode:
#     {%- if menu.event == 'change' -%}
#         G1 Z{'%.2f' % menu.input}
#     {%- elif menu.event == 'long_click' -%}
#         G1 Z{'%.2f' % menu.input}
#         SAVE_GCODE_STATE NAME=__move__axis
#         G91
#         G1 Z2
#         G1 Z-2
#         RESTORE_GCODE_STATE NAME=__move__axis
#     {%- endif -%}

# [menu __mymain __setup __calib __delta_calib_man __test_z]
# type: input
# name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
# input: 6
# input_min: 0
# input_max: 11
# input_step: 1
# gcode:
#     {%- if menu.event == 'long_click' -%}
#         TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
#     {%- endif -%}

# [menu __mymain __setup __calib __delta_calib_man __accept]
# type: command
# name: Accept
# gcode: ACCEPT

# [menu __mymain __setup __calib __delta_calib_man __abort]
# type: command
# name: Abort
# gcode: ABORT

[menu __mymain __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
